---
#  Description:  This template deploys a VPC, with a pair of public and private subnets spread
#  across two Availability Zones. It deploys an internet gateway, with a default
#  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
#  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: and01

  VpcCIDR:
    Description: IP range for this VPC
    Type: String
    Default: 172.31.0.0/16

  PublicSubnet1CIDR:
    Description: IP range for the Public Subnet in the first Availability Zone
    Type: String
    Default: 172.31.100.0/24

  PublicSubnet2CIDR:
    Description: IP range for the Public Subnet in the second Availability Zone
    Type: String
    Default: 172.31.101.0/24

  PrivateSubnet1CIDR:
    Description: IP range for the private subnet in the first Availability Zone
    Type: String
    Default: 172.31.200.0/24

  PrivateSubnet2CIDR:
    Description: IP range for the private subnet in the second Availability Zone
    Type: String
    Default: 172.31.201.0/24


#===================== Resources =======================
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

#--------------------  InternetGateway  ------------------------v
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
         Ref: VPC
      InternetGatewayId: !Ref InternetGateway


  VPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

# -- Create a route to a gateway (special DependsOn for It)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#--------------------- end block IGW --------------------------^


#------ PUBLIC Subnets ------

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

#------- PRIVATE Subnet -------

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PrivSubnet(AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PrivSubnet(AZ2)

#------ ROUTE Tables ------------

# ----
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref PublicSubnet2
# ----

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
# ----
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
#-------- VPC Endpoint -------------

  S3EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

#-------- SECURITY Groups ---------

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

#-------------- EC2 ----------------

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: brvv
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "*"
            - "*"
          Resource: "*"
      Roles:
      - !Ref RootRole


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RootRole



# ImageId for Oregon (us-west-2)
  EC2InstanceAZ1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:   "t2.micro"
      ImageId: "ami-05b622b5fa0269787"
      SubnetId:       !Ref PrivateSubnet1
      SecurityGroupIds:
        - Ref: EC2SG
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-AZ1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws s3 cp s3://anders01-hw/nginx/nginx-1.18.0-2.el7.ngx.x86_64.rpm nginx.rpm
          sudo chmod 777 nginx.rpm
          sudo yum install nginx.rpm -y
          sudo systemctl start nginx
          sudo systemctl enable nginx
          cd /usr/share/nginx/html
          sudo aws s3 cp s3://anders01-hw/server1/index.html index.html
          sudo systemctl restart nginx
      IamInstanceProfile:
        !Ref InstanceProfile

# ImageId for Oregon (us-west-2)
  EC2InstanceAZ2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:   "t2.micro"
      ImageId: "ami-05b622b5fa0269787"
      SubnetId:       !Ref PrivateSubnet2
      SecurityGroupIds:
        - Ref: EC2SG
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-AZ2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws s3 cp s3://anders01-hw/nginx/nginx-1.18.0-2.el7.ngx.x86_64.rpm nginx.rpm
          sudo chmod 777 nginx.rpm
          sudo yum install nginx.rpm -y
          sudo systemctl start nginx
          sudo systemctl enable nginx
          cd /usr/share/nginx/html
          sudo aws s3 cp s3://anders01-hw/server2/index.html index.html
          sudo systemctl restart nginx
      IamInstanceProfile:
        !Ref InstanceProfile

#-------- ALB ------------------

  ALB01:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      SecurityGroups:
        - Ref: EC2SG
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Type: application

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Name: !Sub ${EnvironmentName}-ALB-TG
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 200
      Targets:
        - Id:
            Ref: EC2InstanceAZ1
          Port: 80
        - Id:
            Ref: EC2InstanceAZ2
          Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC



  ALBList:
     Type: AWS::ElasticLoadBalancingV2::Listener
     Properties:
       DefaultActions:
         - Type: forward
           TargetGroupArn:
             Ref: ALBTG
       LoadBalancerArn:
         Ref: ALB01
       Port: 80
       Protocol: HTTP

#---- EC2 Instance Auto Recovery ------

  RecoveryEC2Alarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 10 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '10'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub arn:aws:automate:${AWS::Region}:ec2:recover
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2InstanceAZ1


  RecoveryEC2Alarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 10 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '10'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
      - !Sub arn:aws:automate:${AWS::Region}:ec2:recover
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2InstanceAZ2

#======================================================

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
